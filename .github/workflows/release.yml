name: Build and Release QML C++ App

# Two triggers:
on:
  push:
    branches:
      - main     
  workflow_dispatch: 

jobs:
  build:
    name: Build Application
    runs-on: windows-latest
    if: github.event_name == 'push' 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.14'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install precompiled pyzstd wheel if available
          pip install pyzstd --only-binary=:all: || pip install pyzstd

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.*'
          host: 'windows'
          target: 'desktop'

      - name: Setup MSVC Environment
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: '17.6'

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build build --config Release --parallel

      - name: Deploy Qt dependencies
        run: |
          # Find the built EXE
          $exe = Get-ChildItem build/Release/*.exe | Select-Object -First 1
          Write-Host "Deploying Qt for $exe"
          # Run windeployqt
          & "C:/Qt/6.8/*/msvc*/bin/windeployqt.exe" $exe.FullName

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/Release/


  release:
    name: Create Release
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: release/

      - name: Package Application
        run: |
          powershell Compress-Archive -Path release/* -DestinationPath where.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release-${{ github.run_number }}
          release_name: Manual Release 
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: where.zip
          asset_name: where.zip
          asset_content_type: application/zip
